//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
//     ________   _____  _____    __  .__             __________        .__  .__        //
//     \_____  \_/ ____\/ ____\ _/  |_|  |__   ____   \______   \_____  |  | |  |       //
//      /   |   \   __\\   __\  \   __\  |  \_/ __ \   |    |  _/\__  \ |  | |  |       //
//     /    |    \  |   |  |     |  | |   Y  \  ___/   |    |   \ / __ \|  |_|  |__     //
//     \_______  /__|   |__|     |__| |___|  /\___  >  |______  /(____  /____/____/     //
//             \/                          \/     \/          \/      \/                //
//                                                                                      //
//                          .o                                                          //
//                   ¨>   .                                      <¨                     //
//                  /_                       |                    | ___                 //
//               __/\ `\                     |                   / \                    //
//                   \,                      |                 ,/  /                    //
// ------------------------------------------ ----------------------------------------- //
//                        Copyright(c) 2012 by Bertrand Faure                           //
//////////////////////////////////////////////////////////////////////////////////////////


#include "Ball.h"

float rGravity	=-9.0f;
float rRadius	=0.1f;

// ********************************************
//	Ctor
// ********************************************
Ball::Ball()
{
	Reset();
}

// ********************************************
//	Dtor
// ********************************************
Ball::~Ball()
{

}

// ********************************************
//	Reset
// ********************************************
void Ball::Reset()
{
	_vPos		=hgeVector(-5,5);
	_vLastPos	=_vPos;
	_vVelocity	=hgeVector(3,1);
}

// ********************************************
//	Update
// ********************************************
void Ball::Update(const float rDeltaTime)
{
	float rNewDT =rDeltaTime*1.1f;
	_vLastPos	=_vPos;
	_vPos		+=_vVelocity*rNewDT;
	_vVelocity.y+=rGravity*rNewDT;

	// Collision GND
	if (_vPos.y<0)
	{
		if (_vVelocity.y>(-5.f))
		{
			Reset();
		}
		else
		{
			_vPos.y =0;
			_vVelocity.y =-_vVelocity.y*0.80f;
		}
	}
	// Collision Walls
	if ((_vPos.x>9) || (_vPos.x<-9))
	{
		_vVelocity.x =-_vVelocity.x;
	}
}

// ********************************************
//	Render
// ********************************************
void Ball::Render()
{
	hge->Gfx_RenderBox(_vPos.x-rRadius, _vPos.y-rRadius, _vPos.x+rRadius, _vPos.y+rRadius, 0xFFFFFF00);
}
